import tkinter as tk
from tkinter import messagebox
import pickle

# Load data from a pickle file
def load_data():
    try:
        with open("ticket_data.pickle", "rb") as f:
            return pickle.load(f)
    except FileNotFoundError:
        messagebox.showerror("Error", "Data file not found.")
        return None

# Customer model to store user data
class Customer:
    def __init__(self, customer_id, name, email, password, phone):
        self.customer_id = customer_id
        self.name = name
        self.email = email
        self.password = password
        self.phone = phone

    def __str__(self):
        return f"{self.name} ({self.email})"

# Load application data
data = load_data()
if not data:
    exit()

customers = data["customers"]
tickets_sold = data["tickets_sold"]
discount_enabled = data["discount_enabled"]
tickets = data["tickets"]
admin_credentials = data["admin_credentials"]

# Navigate to login page
def go_home(win):
    win.destroy()
    show_login_page()

# Registration interface
def show_register_page():
    for widget in root.winfo_children():
        widget.destroy()

    tk.Label(root, text="Register as Customer", font=("Arial", 16)).pack(pady=10)

    name = tk.Entry(root)
    email = tk.Entry(root)
    password = tk.Entry(root, show="*")
    phone = tk.Entry(root)

    for label, entry in zip(["Name", "Email", "Password", "Phone"], [name, email, password, phone]):
        tk.Label(root, text=label).pack()
        entry.pack()

    def clear_fields():
        name.delete(0, tk.END)
        email.delete(0, tk.END)
        password.delete(0, tk.END)
        phone.delete(0, tk.END)

    # Register user with input validation
    def register():
        try:
            if not all([name.get(), email.get(), password.get(), phone.get()]):
                raise ValueError("All fields are required.")
            new = Customer(len(customers) + 1, name.get(), email.get(), password.get(), phone.get())
            customers.append(new)
            messagebox.showinfo("Registered", "Account created! Please log in.")
            show_login_page()
        except ValueError as ve:
            messagebox.showerror("Input Error", str(ve))
        except Exception as e:
            messagebox.showerror("Unexpected Error", f"An error occurred: {str(e)}")

    tk.Button(root, text="Register", command=register).pack(pady=5)
    tk.Button(root, text="Clear", command=clear_fields).pack(pady=2)
    tk.Button(root, text="Back to Login", command=show_login_page).pack(pady=5)

# Login interface for customers and admins
def show_login_page():
    for widget in root.winfo_children():
        widget.destroy()

    tk.Label(root, text="Login", font=("Arial", 16)).pack(pady=10)

    role_var = tk.StringVar(value="Customer")
    tk.OptionMenu(root, role_var, "Customer", "Admin").pack()

    username = tk.Entry(root)
    password = tk.Entry(root, show="*")

    for label, entry in zip(["Email", "Password"], [username, password]):
        tk.Label(root, text=label).pack()
        entry.pack()

    def clear_fields():
        username.delete(0, tk.END)
        password.delete(0, tk.END)

    def login():
        if role_var.get() == "Admin":
            if admin_credentials.get(username.get()) == password.get():
                show_admin_dashboard()
            else:
                messagebox.showerror("Login Failed", "Invalid admin credentials")
        else:
            for c in customers:
                if c.email == username.get() and c.password == password.get():
                    show_customer_home(c)
                    return
            messagebox.showerror("Login Failed", "Customer not found")

    tk.Button(root, text="Login", command=login).pack(pady=5)
    tk.Button(root, text="Clear", command=clear_fields).pack(pady=2)
    tk.Button(root, text="Register", command=show_register_page).pack(pady=5)

# Customer main menu
def show_customer_home(customer):
    for widget in root.winfo_children():
        widget.destroy()

    tk.Label(root, text=f"Welcome, {customer.name}", font=("Arial", 16)).pack(pady=10)

    tk.Button(root, text="Account Management", width=30, command=lambda: open_account_management(customer)).pack(pady=5)
    tk.Button(root, text="Ticket Purchasing Interface", width=30, command=lambda: open_ticket_interface(customer)).pack(pady=5)
    tk.Button(root, text="Logout", width=30, command=show_login_page).pack(pady=20)
# Return to customer's homepage from a popup window
def go_back_to_customer_home(win, customer):
    win.destroy()
    show_customer_home(customer)

# Account management window (view/delete account)
def open_account_management(customer):
    win = tk.Toplevel()
    win.title("Your Account")
    win.geometry("300x250")

    tk.Label(win, text=f"Name: {customer.name}").pack()
    tk.Label(win, text=f"Email: {customer.email}").pack()
    tk.Label(win, text=f"Phone: {customer.phone}").pack()

    def delete_account():
        if messagebox.askyesno("Delete", "Are you sure?"):
            customers.remove(customer)
            win.destroy()
            show_login_page()

    tk.Button(win, text="Delete Account", command=delete_account).pack(pady=5)
    tk.Button(win, text="Back", command=lambda: go_back_to_customer_home(win, customer)).pack(pady=5)

# Ticket purchasing window
def open_ticket_interface(customer):
    win = tk.Toplevel()
    win.title("Tickets")
    win.geometry("370x320")

    tk.Label(win, text="Select Ticket Types:", font=("Arial", 12)).pack(pady=5)

    selected_vars = []
    for ticket in tickets:
        var = tk.IntVar()
        info = f"{ticket['type']} | ${ticket['price']} | {ticket['validity']}\nFeatures: {ticket['features']}"
        cb = tk.Checkbutton(win, text=info, variable=var, justify="left", anchor="w", wraplength=300, width=50)
        cb.pack(pady=3)
        selected_vars.append((var, ticket))

    tk.Label(win, text="Payment Method:").pack()
    pay_method = tk.StringVar(value="Credit Card")
    tk.OptionMenu(win, pay_method, "Credit Card", "Debit Card", "Cash").pack()

    def purchase():
        try:
            selected_tickets = [ticket for var, ticket in selected_vars if var.get()]
            if not selected_tickets:
                raise ValueError("Please select at least one ticket.")
            total = sum(t['price'] for t in selected_tickets)
            if discount_enabled:
                total *= 0.9
            ticket_list = "\n".join(t['type'] for t in selected_tickets)
            messagebox.showinfo("Purchase Successful", f"You purchased:\n{ticket_list}\nTotal: ${total:.2f}\nPayment: {pay_method.get()}")
        except ValueError as ve:
            messagebox.showwarning("Warning", str(ve))
        except Exception as e:
            messagebox.showerror("Error", f"Failed to complete purchase.\n{str(e)}")

    tk.Button(win, text="Purchase Ticket(s)", command=purchase).pack(pady=10)
    tk.Button(win, text="Back", command=lambda: go_back_to_customer_home(win, customer)).pack(pady=5)

# Admin dashboard to monitor sales and discounts
def show_admin_dashboard():
    for widget in root.winfo_children():
        widget.destroy()

    tk.Label(root, text="Admin Dashboard", font=("Arial", 16)).pack(pady=10)

    tk.Label(root, text="Ticket Sales Per Day:").pack()
    for date, count in tickets_sold.items():
        tk.Label(root, text=f"{date}: {count} tickets").pack()

    discount_status = tk.StringVar(value="Enabled" if discount_enabled else "Disabled")

    def toggle_discount():
        global discount_enabled
        discount_enabled = not discount_enabled
        discount_status.set("Enabled" if discount_enabled else "Disabled")

    tk.Label(root, text="Discount Availability:").pack()
    tk.Label(root, textvariable=discount_status, fg="blue").pack()
    tk.Button(root, text="Toggle Discount", command=toggle_discount).pack(pady=5)
    tk.Button(root, text="Logout", command=show_login_page).pack(pady=10)

# Initialize main app window
root = tk.Tk()
root.title("Race Ticketing System")
root.geometry("400x370")
show_login_page()
root.mainloop()
